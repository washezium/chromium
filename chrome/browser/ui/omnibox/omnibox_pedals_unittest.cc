// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "base/environment.h"
#include "base/strings/utf_string_conversions.h"
#include "components/omnibox/browser/mock_autocomplete_provider_client.h"
#include "components/omnibox/browser/omnibox_pedal_provider.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "ui/base/resource/resource_bundle.h"

// Note: Pedals have their own components unit tests, which should be
// the preferred place for testing the classes. The tests here are for
// testing things that depend on Chrome resources, for example the localization
// pak files generated by chrome:packed_resources.

TEST(OmniboxPedals, DataLoadsForAllLocales) {
  // Locale selection is platform sensitive. On Linux, environment is used.
  std::unique_ptr<base::Environment> env = base::Environment::Create();
  MockAutocompleteProviderClient client;

  struct TestCase {
    std::string locale;
    std::string trigger;
  };
  const TestCase test_cases[] = {
      {"de", "leeren cache"},        {"en", "clear history"},
      {"fr", "supprime historique"}, {"ja", "消す 履歴"},
      {"zh-CN", "清除 数据"},
  };
  for (const TestCase& test_case : test_cases) {
    // Prepare the shared ResourceBundle with data for tested locale.
    env->SetVar("LANG", test_case.locale);
    ui::ResourceBundle::GetSharedInstance().ReloadLocaleResources(
        test_case.locale);

    // Instantiating the provider loads concept data from shared ResourceBundle.
    OmniboxPedalProvider provider(client);

    EXPECT_EQ(provider.FindPedalMatch(base::UTF8ToUTF16("")), nullptr);
    EXPECT_NE(provider.FindPedalMatch(base::UTF8ToUTF16(test_case.trigger)),
              nullptr)
        << "locale: " << test_case.locale;
  }
}

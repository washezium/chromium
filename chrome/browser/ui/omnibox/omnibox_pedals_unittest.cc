// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "base/environment.h"
#include "base/strings/utf_string_conversions.h"
#include "components/omnibox/browser/mock_autocomplete_provider_client.h"
#include "components/omnibox/browser/omnibox_pedal_provider.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "ui/base/resource/resource_bundle.h"

// Note: Pedals have their own components unit tests, which should be
// the preferred place for testing the classes. The tests here are for
// testing things that depend on Chrome resources, for example the localization
// pak files generated by chrome:packed_resources.

TEST(OmniboxPedals, DataLoadsForAllLocales) {
  // Locale selection is platform sensitive. On Linux, environment is used.
  std::unique_ptr<base::Environment> env = base::Environment::Create();
  MockAutocompleteProviderClient client;

  struct TestCase {
    std::string locale;
    std::string trigger;
  };
  const TestCase test_cases[] = {
      // clang-format off
      // Test cases generated by pedal_processor:
      {"am", "አስወግድ መሸጎጫ"},
      {"ar", "إزالة ذاكرة التخزين المؤقت"},
      {"bg", "премахване"},
      {"bn", "মিটিয়ে দিন ক্যাশে ফাইল"},
      {"ca", "suprimeix memòria cau"},
      {"cs", "odstranit soubory cookie"},
      {"da", "fjern browseroplysninger"},
      {"de", "entfernen browserverlauf"},
      {"el", "εκκαθάριση πληροφορίες"},
      {"en", "delete information"},
      {"en-GB", "delete information"},
      {"es", "eliminar información"},
      {"es-419", "eliminar información"},
      {"et", "tühjenda küpsisefailid"},
      {"fa", "حذف کردن حافظه پنهان"},
      {"fi", "tyhjennä historiatiedot"},
      {"fil", "i-delete impormasyon"},
      {"fr", "suppression informations"},
      {"gu", "ડિલીટ કરો ઇતિહાસ"},
      {"he", "איפוס נתונים"},
      {"hi", "वाइप करें कैश मेमोरी"},
      {"hr", "odstranjivanje privremena memorija"},
      {"hu", "eltávolítása gyorsítótár"},
      {"id", "hapus informasi"},
      {"it", "cancellare informazioni"},
      {"ja", "クリアキャッシュ"},
      {"kn", "ತೆರವುಗೊಳಿಸಿ ಕುಕೀಗಳು"},
      {"ko", "완전 삭제 데이터"},
      {"lt", "pašalinti informacija"},
      {"lv", "notīrīt informācija"},
      {"ml", "നീക്കം ചെയ്യുക വിവരങ്ങൾ"},
      {"mr", "काढून टाका इतिहास"},
      {"ms", "alih keluar maklumat"},
      {"nl", "google chrome verwijderen cachegeheugen"},
      {"pl", "wyczyść pamięć podręczną przeglądarki"},
      {"pt-BR", "excluir permanentemente informações"},
      {"pt-PT", "eliminar informações"},
      {"ro", "elimină informații"},
      {"ru", "почистить информацию"},
      {"sk", "odstrániť vyrovnávacia pamäť"},
      {"sl", "izbriši predpomnilnik"},
      {"sr", "избрисати информације"},
      {"sv", "ta bort information"},
      {"sw", "ondoa kumbukumbu"},
      {"ta", "வைப் செய் தற்காலிகச் சேமிப்பு"},
      {"te", "క్లియర్ చేయడం కుక్కీలు"},
      {"th", "ล้างข้อมูล ประวัติ"},
      {"tr", "kaldır önbelleği"},
      {"uk", "видалити інформація"},
      {"vi", "dọn sạch bộ nhớ đệm"},
      {"zh-CN", "清除浏览数据"},
      {"zh-TW", "刪除 歷史記錄"},
      // clang-format on
  };
  for (const TestCase& test_case : test_cases) {
    // Prepare the shared ResourceBundle with data for tested locale.
    env->SetVar("LANG", test_case.locale);
    ui::ResourceBundle::GetSharedInstance().ReloadLocaleResources(
        test_case.locale);

    // Instantiating the provider loads concept data from shared ResourceBundle.
    OmniboxPedalProvider provider(client);

    EXPECT_EQ(provider.FindPedalMatch(base::UTF8ToUTF16("")), nullptr);
#if defined(OS_CHROMEOS)
    // TODO(orinj): Get ChromeOS to use the right dataset, but for now make this
    //  a soft failure so as to not block all other platforms. To ensure this
    //  is not going to cause failure in production, still test that English
    //  triggering functions. Data is there; it works; but warn about locale.
    if (!provider.FindPedalMatch(base::UTF8ToUTF16(test_case.trigger))) {
      EXPECT_NE(provider.FindPedalMatch(base::UTF8ToUTF16("clear history")),
                nullptr);
      LOG(WARNING) << "ChromeOS using English for locale " << test_case.locale;
      continue;
    }
#endif
    EXPECT_NE(provider.FindPedalMatch(base::UTF8ToUTF16(test_case.trigger)),
              nullptr)
        << "locale: " << test_case.locale;
  }
}
